// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class _Application extends EthereumEvent {
  get params(): _Application__Params {
    return new _Application__Params(this);
  }
}

export class _Application__Params {
  _event: _Application;

  constructor(event: _Application) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get deposit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get appEndDate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class _Challenge extends EthereumEvent {
  get params(): _Challenge__Params {
    return new _Challenge__Params(this);
  }
}

export class _Challenge__Params {
  _event: _Challenge;

  constructor(event: _Challenge) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get challengeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deposit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class _Deposit extends EthereumEvent {
  get params(): _Deposit__Params {
    return new _Deposit__Params(this);
  }
}

export class _Deposit__Params {
  _event: _Deposit;

  constructor(event: _Deposit) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get added(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class _Withdrawal extends EthereumEvent {
  get params(): _Withdrawal__Params {
    return new _Withdrawal__Params(this);
  }
}

export class _Withdrawal__Params {
  _event: _Withdrawal;

  constructor(event: _Withdrawal) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get withdrew(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class _ApplicationWhitelisted extends EthereumEvent {
  get params(): _ApplicationWhitelisted__Params {
    return new _ApplicationWhitelisted__Params(this);
  }
}

export class _ApplicationWhitelisted__Params {
  _event: _ApplicationWhitelisted;

  constructor(event: _ApplicationWhitelisted) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class _ApplicationRemoved extends EthereumEvent {
  get params(): _ApplicationRemoved__Params {
    return new _ApplicationRemoved__Params(this);
  }
}

export class _ApplicationRemoved__Params {
  _event: _ApplicationRemoved;

  constructor(event: _ApplicationRemoved) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class _ListingRemoved extends EthereumEvent {
  get params(): _ListingRemoved__Params {
    return new _ListingRemoved__Params(this);
  }
}

export class _ListingRemoved__Params {
  _event: _ListingRemoved;

  constructor(event: _ListingRemoved) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class _ListingWithdrawn extends EthereumEvent {
  get params(): _ListingWithdrawn__Params {
    return new _ListingWithdrawn__Params(this);
  }
}

export class _ListingWithdrawn__Params {
  _event: _ListingWithdrawn;

  constructor(event: _ListingWithdrawn) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class _TouchAndRemoved extends EthereumEvent {
  get params(): _TouchAndRemoved__Params {
    return new _TouchAndRemoved__Params(this);
  }
}

export class _TouchAndRemoved__Params {
  _event: _TouchAndRemoved;

  constructor(event: _TouchAndRemoved) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class _ChallengeFailed extends EthereumEvent {
  get params(): _ChallengeFailed__Params {
    return new _ChallengeFailed__Params(this);
  }
}

export class _ChallengeFailed__Params {
  _event: _ChallengeFailed;

  constructor(event: _ChallengeFailed) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get challengeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class _ChallengeSucceeded extends EthereumEvent {
  get params(): _ChallengeSucceeded__Params {
    return new _ChallengeSucceeded__Params(this);
  }
}

export class _ChallengeSucceeded__Params {
  _event: _ChallengeSucceeded;

  constructor(event: _ChallengeSucceeded) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get challengeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class _RewardClaimed extends EthereumEvent {
  get params(): _RewardClaimed__Params {
    return new _RewardClaimed__Params(this);
  }
}

export class _RewardClaimed__Params {
  _event: _RewardClaimed;

  constructor(event: _RewardClaimed) {
    this._event = event;
  }

  get challengeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class _ListingMigrated extends EthereumEvent {
  get params(): _ListingMigrated__Params {
    return new _ListingMigrated__Params(this);
  }
}

export class _ListingMigrated__Params {
  _event: _ListingMigrated;

  constructor(event: _ListingMigrated) {
    this._event = event;
  }

  get listingHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newRegistry(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegistryContract__challengesResult {
  value0: BigInt;
  value1: Address;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: boolean,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromBoolean(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class RegistryContract__listingsResult {
  value0: BigInt;
  value1: boolean;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: Address,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class RegistryContract extends SmartContract {
  static bind(address: Address): RegistryContract {
    return new RegistryContract("RegistryContract", address);
  }

  isWhitelisted(_listingHash: Bytes): boolean {
    let result = super.call("isWhitelisted", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(_listingHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("isWhitelisted", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  challengeExists(_listingHash: Bytes): boolean {
    let result = super.call("challengeExists", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);

    return result[0].toBoolean();
  }

  try_challengeExists(_listingHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("challengeExists", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", []);

    return result[0].toString();
  }

  try_version(): CallResult<string> {
    let result = super.tryCall("version", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  numApplications(param0: Address): BigInt {
    let result = super.call("numApplications", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_numApplications(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("numApplications", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  canBeWhitelisted(_listingHash: Bytes): boolean {
    let result = super.call("canBeWhitelisted", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);

    return result[0].toBoolean();
  }

  try_canBeWhitelisted(_listingHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("canBeWhitelisted", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  listingExists(listingHash: Bytes): boolean {
    let result = super.call("listingExists", [
      EthereumValue.fromFixedBytes(listingHash)
    ]);

    return result[0].toBoolean();
  }

  try_listingExists(listingHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("listingExists", [
      EthereumValue.fromFixedBytes(listingHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  challengeCanBeResolved(_listingHash: Bytes): boolean {
    let result = super.call("challengeCanBeResolved", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);

    return result[0].toBoolean();
  }

  try_challengeCanBeResolved(_listingHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("challengeCanBeResolved", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  appWasMade(_listingHash: Bytes): boolean {
    let result = super.call("appWasMade", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);

    return result[0].toBoolean();
  }

  try_appWasMade(_listingHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("appWasMade", [
      EthereumValue.fromFixedBytes(_listingHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  challenges(param0: BigInt): RegistryContract__challengesResult {
    let result = super.call("challenges", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new RegistryContract__challengesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_challenges(
    param0: BigInt
  ): CallResult<RegistryContract__challengesResult> {
    let result = super.tryCall("challenges", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new RegistryContract__challengesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  totalStaked(param0: Address): BigInt {
    let result = super.call("totalStaked", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_totalStaked(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("totalStaked", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokenClaims(_challengeID: BigInt, _voter: Address): boolean {
    let result = super.call("tokenClaims", [
      EthereumValue.fromUnsignedBigInt(_challengeID),
      EthereumValue.fromAddress(_voter)
    ]);

    return result[0].toBoolean();
  }

  try_tokenClaims(_challengeID: BigInt, _voter: Address): CallResult<boolean> {
    let result = super.tryCall("tokenClaims", [
      EthereumValue.fromUnsignedBigInt(_challengeID),
      EthereumValue.fromAddress(_voter)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  voterReward(_voter: Address, _challengeID: BigInt, _salt: BigInt): BigInt {
    let result = super.call("voterReward", [
      EthereumValue.fromAddress(_voter),
      EthereumValue.fromUnsignedBigInt(_challengeID),
      EthereumValue.fromUnsignedBigInt(_salt)
    ]);

    return result[0].toBigInt();
  }

  try_voterReward(
    _voter: Address,
    _challengeID: BigInt,
    _salt: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("voterReward", [
      EthereumValue.fromAddress(_voter),
      EthereumValue.fromUnsignedBigInt(_challengeID),
      EthereumValue.fromUnsignedBigInt(_salt)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  listings(param0: Bytes): RegistryContract__listingsResult {
    let result = super.call("listings", [EthereumValue.fromFixedBytes(param0)]);

    return new RegistryContract__listingsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_listings(param0: Bytes): CallResult<RegistryContract__listingsResult> {
    let result = super.tryCall("listings", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new RegistryContract__listingsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  determineReward(_challengeID: BigInt): BigInt {
    let result = super.call("determineReward", [
      EthereumValue.fromUnsignedBigInt(_challengeID)
    ]);

    return result[0].toBigInt();
  }

  try_determineReward(_challengeID: BigInt): CallResult<BigInt> {
    let result = super.tryCall("determineReward", [
      EthereumValue.fromUnsignedBigInt(_challengeID)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  parameterizer(): Address {
    let result = super.call("parameterizer", []);

    return result[0].toAddress();
  }

  try_parameterizer(): CallResult<Address> {
    let result = super.tryCall("parameterizer", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  voting(): Address {
    let result = super.call("voting", []);

    return result[0].toAddress();
  }

  try_voting(): CallResult<Address> {
    let result = super.tryCall("voting", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  challenge(_listingHash: Bytes, _deposit: BigInt, _data: string): BigInt {
    let result = super.call("challenge", [
      EthereumValue.fromFixedBytes(_listingHash),
      EthereumValue.fromUnsignedBigInt(_deposit),
      EthereumValue.fromString(_data)
    ]);

    return result[0].toBigInt();
  }

  try_challenge(
    _listingHash: Bytes,
    _deposit: BigInt,
    _data: string
  ): CallResult<BigInt> {
    let result = super.tryCall("challenge", [
      EthereumValue.fromFixedBytes(_listingHash),
      EthereumValue.fromUnsignedBigInt(_deposit),
      EthereumValue.fromString(_data)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ExitCall extends EthereumCall {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get _listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class DepositCall extends EthereumCall {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends EthereumCall {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get _challengeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _salt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ApplyCall extends EthereumCall {
  get inputs(): ApplyCall__Inputs {
    return new ApplyCall__Inputs(this);
  }

  get outputs(): ApplyCall__Outputs {
    return new ApplyCall__Outputs(this);
  }
}

export class ApplyCall__Inputs {
  _call: ApplyCall;

  constructor(call: ApplyCall) {
    this._call = call;
  }

  get _listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ApplyCall__Outputs {
  _call: ApplyCall;

  constructor(call: ApplyCall) {
    this._call = call;
  }
}

export class UpdateStatusCall extends EthereumCall {
  get inputs(): UpdateStatusCall__Inputs {
    return new UpdateStatusCall__Inputs(this);
  }

  get outputs(): UpdateStatusCall__Outputs {
    return new UpdateStatusCall__Outputs(this);
  }
}

export class UpdateStatusCall__Inputs {
  _call: UpdateStatusCall;

  constructor(call: UpdateStatusCall) {
    this._call = call;
  }

  get _listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UpdateStatusCall__Outputs {
  _call: UpdateStatusCall;

  constructor(call: UpdateStatusCall) {
    this._call = call;
  }
}

export class MigrateListingCall extends EthereumCall {
  get inputs(): MigrateListingCall__Inputs {
    return new MigrateListingCall__Inputs(this);
  }

  get outputs(): MigrateListingCall__Outputs {
    return new MigrateListingCall__Outputs(this);
  }
}

export class MigrateListingCall__Inputs {
  _call: MigrateListingCall;

  constructor(call: MigrateListingCall) {
    this._call = call;
  }

  get listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class MigrateListingCall__Outputs {
  _call: MigrateListingCall;

  constructor(call: MigrateListingCall) {
    this._call = call;
  }
}

export class ChallengeCall extends EthereumCall {
  get inputs(): ChallengeCall__Inputs {
    return new ChallengeCall__Inputs(this);
  }

  get outputs(): ChallengeCall__Outputs {
    return new ChallengeCall__Outputs(this);
  }
}

export class ChallengeCall__Inputs {
  _call: ChallengeCall;

  constructor(call: ChallengeCall) {
    this._call = call;
  }

  get _listingHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _deposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ChallengeCall__Outputs {
  _call: ChallengeCall;

  constructor(call: ChallengeCall) {
    this._call = call;
  }

  get challengeID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _plcrAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _paramsAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Listing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Listing entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Listing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Listing", id.toString(), this);
  }

  static load(id: string): Listing | null {
    return store.get("Listing", id) as Listing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get wasRemoved(): boolean {
    let value = this.get("wasRemoved");
    return value.toBoolean();
  }

  set wasRemoved(value: boolean) {
    this.set("wasRemoved", Value.fromBoolean(value));
  }

  get wasWithdrawn(): boolean {
    let value = this.get("wasWithdrawn");
    return value.toBoolean();
  }

  set wasWithdrawn(value: boolean) {
    this.set("wasWithdrawn", Value.fromBoolean(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get applicationExpiry(): BigInt {
    let value = this.get("applicationExpiry");
    return value.toBigInt();
  }

  set applicationExpiry(value: BigInt) {
    this.set("applicationExpiry", Value.fromBigInt(value));
  }

  get data(): string | null {
    let value = this.get("data");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(value as string));
    }
  }
}

export class Challenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Challenge entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Challenge entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Challenge", id.toString(), this);
  }

  static load(id: string): Challenge | null {
    return store.get("Challenge", id) as Challenge | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listing(): string | null {
    let value = this.get("listing");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set listing(value: string | null) {
    if (value === null) {
      this.unset("listing");
    } else {
      this.set("listing", Value.fromString(value as string));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt | null {
    let value = this.get("createdAtTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAtTimestamp");
    } else {
      this.set("createdAtTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(value as string));
    }
  }

  get stake(): BigInt | null {
    let value = this.get("stake");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stake(value: BigInt | null) {
    if (value === null) {
      this.unset("stake");
    } else {
      this.set("stake", Value.fromBigInt(value as BigInt));
    }
  }

  get resolved(): boolean {
    let value = this.get("resolved");
    return value.toBoolean();
  }

  set resolved(value: boolean) {
    this.set("resolved", Value.fromBoolean(value));
  }

  get voteCommitEndTimestamp(): BigInt {
    let value = this.get("voteCommitEndTimestamp");
    return value.toBigInt();
  }

  set voteCommitEndTimestamp(value: BigInt) {
    this.set("voteCommitEndTimestamp", Value.fromBigInt(value));
  }

  get voteRevealEndTimestamp(): BigInt {
    let value = this.get("voteRevealEndTimestamp");
    return value.toBigInt();
  }

  set voteRevealEndTimestamp(value: BigInt) {
    this.set("voteRevealEndTimestamp", Value.fromBigInt(value));
  }

  get quorumRequired(): BigInt {
    let value = this.get("quorumRequired");
    return value.toBigInt();
  }

  set quorumRequired(value: BigInt) {
    this.set("quorumRequired", Value.fromBigInt(value));
  }

  get totalNumberOfVotesCommitted(): BigInt | null {
    let value = this.get("totalNumberOfVotesCommitted");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalNumberOfVotesCommitted(value: BigInt | null) {
    if (value === null) {
      this.unset("totalNumberOfVotesCommitted");
    } else {
      this.set(
        "totalNumberOfVotesCommitted",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get totalNumberOfVotesRevealed(): BigInt | null {
    let value = this.get("totalNumberOfVotesRevealed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalNumberOfVotesRevealed(value: BigInt | null) {
    if (value === null) {
      this.unset("totalNumberOfVotesRevealed");
    } else {
      this.set("totalNumberOfVotesRevealed", Value.fromBigInt(value as BigInt));
    }
  }

  get totalVotesCommitted(): BigInt | null {
    let value = this.get("totalVotesCommitted");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalVotesCommitted(value: BigInt | null) {
    if (value === null) {
      this.unset("totalVotesCommitted");
    } else {
      this.set("totalVotesCommitted", Value.fromBigInt(value as BigInt));
    }
  }

  get totalVotesRevealed(): BigInt | null {
    let value = this.get("totalVotesRevealed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalVotesRevealed(value: BigInt | null) {
    if (value === null) {
      this.unset("totalVotesRevealed");
    } else {
      this.set("totalVotesRevealed", Value.fromBigInt(value as BigInt));
    }
  }

  get totalNumberOfVotesFor(): BigInt {
    let value = this.get("totalNumberOfVotesFor");
    return value.toBigInt();
  }

  set totalNumberOfVotesFor(value: BigInt) {
    this.set("totalNumberOfVotesFor", Value.fromBigInt(value));
  }

  get totalVotesFor(): BigInt {
    let value = this.get("totalVotesFor");
    return value.toBigInt();
  }

  set totalVotesFor(value: BigInt) {
    this.set("totalVotesFor", Value.fromBigInt(value));
  }

  get totalNumberOfVotesAgainst(): BigInt {
    let value = this.get("totalNumberOfVotesAgainst");
    return value.toBigInt();
  }

  set totalNumberOfVotesAgainst(value: BigInt) {
    this.set("totalNumberOfVotesAgainst", Value.fromBigInt(value));
  }

  get totalVotesAgainst(): BigInt {
    let value = this.get("totalVotesAgainst");
    return value.toBigInt();
  }

  set totalVotesAgainst(value: BigInt) {
    this.set("totalVotesAgainst", Value.fromBigInt(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (value === null) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(value as Array<string>));
    }
  }

  get committedUsers(): Array<string> | null {
    let value = this.get("committedUsers");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set committedUsers(value: Array<string> | null) {
    if (value === null) {
      this.unset("committedUsers");
    } else {
      this.set("committedUsers", Value.fromStringArray(value as Array<string>));
    }
  }

  get revealedUsers(): Array<string> | null {
    let value = this.get("revealedUsers");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set revealedUsers(value: Array<string> | null) {
    if (value === null) {
      this.unset("revealedUsers");
    } else {
      this.set("revealedUsers", Value.fromStringArray(value as Array<string>));
    }
  }

  get rewardPool(): BigInt {
    let value = this.get("rewardPool");
    return value.toBigInt();
  }

  set rewardPool(value: BigInt) {
    this.set("rewardPool", Value.fromBigInt(value));
  }

  get data(): string | null {
    let value = this.get("data");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(value as string));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numChallenges(): BigInt {
    let value = this.get("numChallenges");
    return value.toBigInt();
  }

  set numChallenges(value: BigInt) {
    this.set("numChallenges", Value.fromBigInt(value));
  }

  get numListingApplications(): BigInt {
    let value = this.get("numListingApplications");
    return value.toBigInt();
  }

  set numListingApplications(value: BigInt) {
    this.set("numListingApplications", Value.fromBigInt(value));
  }

  get numListingsWhitelisted(): BigInt {
    let value = this.get("numListingsWhitelisted");
    return value.toBigInt();
  }

  set numListingsWhitelisted(value: BigInt) {
    this.set("numListingsWhitelisted", Value.fromBigInt(value));
  }

  get numVotesCommitted(): BigInt {
    let value = this.get("numVotesCommitted");
    return value.toBigInt();
  }

  set numVotesCommitted(value: BigInt) {
    this.set("numVotesCommitted", Value.fromBigInt(value));
  }

  get numVotesRevealed(): BigInt {
    let value = this.get("numVotesRevealed");
    return value.toBigInt();
  }

  set numVotesRevealed(value: BigInt) {
    this.set("numVotesRevealed", Value.fromBigInt(value));
  }

  get totalAmountStaked(): BigInt {
    let value = this.get("totalAmountStaked");
    return value.toBigInt();
  }

  set totalAmountStaked(value: BigInt) {
    this.set("totalAmountStaked", Value.fromBigInt(value));
  }

  get totalMapRewards(): BigInt {
    let value = this.get("totalMapRewards");
    return value.toBigInt();
  }

  set totalMapRewards(value: BigInt) {
    this.set("totalMapRewards", Value.fromBigInt(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vote", id.toString(), this);
  }

  static load(id: string): Vote | null {
    return store.get("Vote", id) as Vote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challenge(): string {
    let value = this.get("challenge");
    return value.toString();
  }

  set challenge(value: string) {
    this.set("challenge", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get isRevealed(): boolean {
    let value = this.get("isRevealed");
    return value.toBoolean();
  }

  set isRevealed(value: boolean) {
    this.set("isRevealed", Value.fromBoolean(value));
  }

  get isChallengeResolved(): boolean {
    let value = this.get("isChallengeResolved");
    return value.toBoolean();
  }

  set isChallengeResolved(value: boolean) {
    this.set("isChallengeResolved", Value.fromBoolean(value));
  }

  get isForChallenge(): boolean {
    let value = this.get("isForChallenge");
    return value.toBoolean();
  }

  set isForChallenge(value: boolean) {
    this.set("isForChallenge", Value.fromBoolean(value));
  }

  get voteAmount(): BigInt {
    let value = this.get("voteAmount");
    return value.toBigInt();
  }

  set voteAmount(value: BigInt) {
    this.set("voteAmount", Value.fromBigInt(value));
  }

  get wonChallenge(): boolean {
    let value = this.get("wonChallenge");
    return value.toBoolean();
  }

  set wonChallenge(value: boolean) {
    this.set("wonChallenge", Value.fromBoolean(value));
  }

  get rewardAmount(): BigInt | null {
    let value = this.get("rewardAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("rewardAmount");
    } else {
      this.set("rewardAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get rewardClaimed(): boolean {
    let value = this.get("rewardClaimed");
    return value.toBoolean();
  }

  set rewardClaimed(value: boolean) {
    this.set("rewardClaimed", Value.fromBoolean(value));
  }
}
